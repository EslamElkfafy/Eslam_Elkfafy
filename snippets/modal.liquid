<!-- Product Modal Snippet -->
<link rel="stylesheet" href="{{ 'product-modal.css' | asset_url }}">
<!-- Product Modal -->
<div class="product-modal-overlay" id="product-modal-overlay" style="display: none;">
  <div class="product-modal-container">
    <!-- Close button -->
    <button class="product-modal-close" onclick="closeProductModal()" aria-label="Close product modal">
      <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 18 18" fill="none">
        <path d="M5.03754 4.94355L13.5228 13.4288" stroke="black" stroke-width="1.5" stroke-linecap="square" stroke-linejoin="round"/>
        <path d="M5.03754 13.4285L13.5228 4.94324" stroke="black" stroke-width="1.5" stroke-linecap="square" stroke-linejoin="round"/>
      </svg>
    </button>

    <div class="product-modal-information-container">
      <!-- Product Image -->
      <div class="product-modal-image-container">
        <img id="product-modal-image" src="" alt="Product" class="product-modal-image" width="120" height="140">
      </div>
      <div class="product-modal-details-container">
        <!-- Product Title -->
        <div class="product-modal-title-container">
          <span class="product-modal-title" id="product-modal-title"></span>
        </div>

        <!-- Product Price -->
        <div class="product-modal-price-container">
          <span class="product-modal-price" id="product-modal-price"></span>
        </div>

        <!-- Product Description -->
        <div class="product-modal-description-container">
          <span class="product-modal-description" id="product-modal-description"></span>
        </div>
      </div>
    </div>

    <!-- Color Selection -->
    <div class="product-modal-color-container" id="color-options"></div>

    <!-- Size Selection -->
    <div class="product-modal-size-container">
      <div class="product-modal-size-label">
        <span class="product-modal-size-label-text">Size</span>
      </div>
      <div class="product-modal-size-dropdown">
        <button class="product-modal-size-button" id="size-dropdown-btn">
          <span class="product-modal-size-text" id="selected-size">Select size</span>
          <div class="product-modal-size-arrow">
            <img
              id="size-dropdown-arrow"
              src="{{ 'arrow-modal-down.svg' | asset_url }}"
              width="10"
              height="6"
              alt="arrow down"
            >
          </div>
        </button>
        <div class="product-modal-size-dropdown-menu" id="size-options" style="display: none;"></div>
      </div>
    </div>

    <!-- Add to Cart Button -->
    <div class="product-modal-cart-container">
      <button class="product-modal-cart-button" onclick="addToCart()">
        <span class="product-modal-cart-text">Add to cart</span>
        <svg
          class="product-modal-cart-icon"
          width="34"
          height="12"
          viewBox="0 0 36 12"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path d="M1.40933 5.25L0.659332 5.25L0.659332 6.75L1.40933 6.75L1.40933 6L1.40933 5.25ZM35.6391 6.53033C35.932 6.23744 35.932 5.76257 35.6391 5.46967L30.8662 0.696701C30.5733 0.403808 30.0984 0.403808 29.8055 0.696701C29.5126 0.989594 29.5126 1.46447 29.8055 1.75736L34.0482 6L29.8055 10.2426C29.5126 10.5355 29.5126 11.0104 29.8055 11.3033C30.0984 11.5962 30.5733 11.5962 30.8662 11.3033L35.6391 6.53033ZM1.40933 6L1.40933 6.75L35.1088 6.75L35.1088 6L35.1088 5.25L1.40933 5.25L1.40933 6Z" fill="white"/>
        </svg>
      </button>
      <div id="product-modal-error" class="product-modal-error"></div>
    </div>

    <!-- Hidden input for selected variant -->
    <input type="hidden" id="selected-variant-id" value="">
  </div>
</div>

<script>
  // Product Modal JavaScript
  // Handles product selection, variant selection, and cart functionality

  // Global state variables for tracking the current product and selections
  let currentProduct = null;
  let selectedColor = null;
  let selectedSize = null;

  /**
   * Opens the product modal with details for a specific product
   * @param {string} handle - The product handle/slug
   */
  async function openProductModal(handle) {
    try {
      // Fetch product data from Shopify API
      const res = await fetch(`/products/${handle}.json`);
      const { product } = await res.json();
      currentProduct = product;

      // Populate basic product information
      document.getElementById('product-modal-title').textContent = product.title;
      document.getElementById('product-modal-description').innerHTML = product.body_html;
      document.getElementById('product-modal-image').src = product.image?.src || '';
      document.getElementById('product-modal-image').alt = product.title;

      // Set initial price to first variant
      const firstVariant = product.variants[0];
      document.getElementById(
        'product-modal-price'
      ).textContent = `$${firstVariant.price} ${firstVariant.price_currency}`;

      // Build color selection buttons
      buildColorOptions(product);

      // Build size selection dropdown
      buildSizeOptions(product);

      // Reset selections
      selectedColor = null;
      selectedSize = null;
      document.getElementById('selected-size').textContent = 'Choose your size';

      // Setup size dropdown toggle functionality
      setupSizeDropdown();

      // Show the modal
      document.getElementById('product-modal-overlay').style.display = 'flex';
    } catch (error) {
      console.error('Error loading product:', error);
    }
  }

  /**
   * Builds the color selection options based on product data
   * @param {Object} product - The product object from Shopify
   */
  function buildColorOptions(product) {
    const colorContainer = document.getElementById('color-options');
    const colorOption = product.options.find((o) => o.name === 'Color');

    if (colorOption) {
      colorContainer.innerHTML = `
      <div class="product-modal-color-label">
        <span class="product-modal-color-label-text">Color</span>
      </div>
      <div class="product-modal-color-buttons">
        ${colorOption.values
          .map(
            (color) => `
          <button
            class="product-modal-color-button ${color.toLowerCase()}"
            style="--btn-color: ${color.toLowerCase()};"
            onclick="selectColor('${color}')">
            ${color}
          </button>
        `
          )
          .join('')}
      </div>
    `;
    }
  }

  /**
   * Builds the size selection options based on product data
   * @param {Object} product - The product object from Shopify
   */
  function buildSizeOptions(product) {
    const sizeMenu = document.getElementById('size-options');
    const sizeOption = product.options.find((o) => o.name === 'Size');

    if (sizeOption) {
      sizeMenu.innerHTML = sizeOption.values
        .map(
          (size) => `
        <button class="product-modal-size-option" onclick="selectSize('${size}')">${size}</button>
      `
        )
        .join('');
    }
  }

  /**
   * Sets up the size dropdown toggle functionality
   */
  function setupSizeDropdown() {
    const sizeBtn = document.getElementById('size-dropdown-btn');
    const sizeArrow = document.getElementById('size-dropdown-arrow');
    const sizeMenu = document.getElementById('size-options');

    sizeBtn.onclick = () => {
      const isOpen = sizeMenu.style.display === 'block';
      sizeMenu.style.display = isOpen ? 'none' : 'block';
      sizeArrow.src = isOpen ? "{{ 'arrow-modal-down.svg' | asset_url }}" : "{{ 'arrow-modal-up.svg' | asset_url }}";
    };
  }

  /**
   * Handles color selection
   * @param {string} color - The selected color
   */
  function selectColor(color) {
    selectedColor = color;
    // Update UI to show selected color
    document.querySelectorAll('.product-modal-color-button').forEach((btn) => {
      btn.classList.toggle('selected', btn.textContent.trim().toLowerCase() === color.toLowerCase());
    });
    updateVariant();
  }

  /**
   * Handles size selection
   * @param {string} size - The selected size
   */
  function selectSize(size) {
    selectedSize = size;
    document.getElementById('selected-size').textContent = size;
    document.getElementById('size-options').style.display = 'none';
    document.getElementById('size-dropdown-arrow').src = "{{ 'arrow-modal-down.svg' | asset_url }}";
    updateVariant();
  }

  /**
   * Updates the displayed variant information based on selections
   */
  function updateVariant() {
    if (!selectedColor || !selectedSize) return;

    // In Shopify, option1 is typically the first option (Size) and option2 is the second option (Color)
    const variant = currentProduct.variants.find((v) => v.option1 === selectedSize && v.option2 === selectedColor);

    if (variant) {
      document.getElementById('product-modal-price').textContent = `$${variant.price} ${variant.price_currency}`;
      document.getElementById('selected-variant-id').value = variant.id;
    }
  }

  /**
   * Adds the selected product variant to the cart
   */
  async function addToCart() {
    const variantId = document.getElementById('selected-variant-id').value;
    const errorBox = document.getElementById('product-modal-error');
    const addBtn = document.querySelector('.product-modal-cart-button');

    // Reset error message
    errorBox.style.display = 'none';
    errorBox.textContent = '';

    // Validation: Require both color & size
    if (!selectedColor && !selectedSize) {
      errorBox.textContent = 'Please select a color and a size.';
      errorBox.style.display = 'block';
      return;
    }
    if (!selectedColor) {
      errorBox.textContent = 'Please select a color.';
      errorBox.style.display = 'block';
      return;
    }
    if (!selectedSize) {
      errorBox.textContent = 'Please select a size.';
      errorBox.style.display = 'block';
      return;
    }

    if (!variantId) {
      errorBox.textContent = 'This combination is not available.';
      errorBox.style.display = 'block';
      return;
    }

    try {
      // Disable button during request
      addBtn.disabled = true;
      addBtn.textContent = 'Adding...';

      // Add to cart request
      await fetch('/cart/add.js', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ id: variantId, quantity: 1 }),
      });

      // Check condition: Black + Medium
      if (selectedColor.toLowerCase() === 'black' && selectedSize.toLowerCase() === 'm') {
        // ID of "Soft Winter Jacket" variant (replace with real ID from Shopify Admin / theme code)
        const softWinterJacketVariantId = '45057681981601';

        await fetch('/cart/add.js', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ id: softWinterJacketVariantId, quantity: 1 }),
        });
      }

      alert('Added to cart!');
      closeProductModal();
    } catch (err) {
      errorBox.textContent = 'Something went wrong. Please try again.';
      errorBox.style.display = 'block';
    } finally {
      // Re-enable button
      addBtn.disabled = false;
      addBtn.textContent = 'Add to cart';
    }
  }

  /**
   * Closes the product modal
   */
 function closeProductModal() {
    document.getElementById('product-modal-overlay').style.display = 'none';
    document.getElementById('selected-variant-id').value = '';
  }

  // Close modal if clicking outside modal container
  document.getElementById('product-modal-overlay').addEventListener('click', function (e) {
    if (e.target === this) {
      // only if the overlay itself was clicked
      closeProductModal();
    }
  });
</script>
